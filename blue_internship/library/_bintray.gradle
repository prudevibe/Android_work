//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// `gradle bintrayUpload`
//apply plugin: 'com.jfrog.artifactory'
//apply plugin: 'com.jfrog.bintray'
def getThisProperties() {
    Properties localProperties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (!localProperties.hasProperty("bintray.user")) {
            return null
        } else {
            println "user=" + localProperties.getProperty("bintray.user") + ", key=" + localProperties.getProperty("bintray.apikey")
        }
    }
    return localProperties
}
def getBintrayUsername(){
    Properties p = getThisProperties()
    return p && p.hasProperty('bintray.user') ? p.getProperty("bintray.user") : project.hasProperty('bintray.user') ? project.property("bintray.user") : ''
}
def getBintrayKey(){
    Properties p = getThisProperties()
    return p && p.hasProperty('bintray.apikey') ? p.getProperty("bintray.apikey") : project.hasProperty('bintray.apikey') ? project.property("bintray.apikey") : ''
}
println "bintray: user=" + getBintrayUsername() + ", key=" + getBintrayKey()

bintray {
    user = getBintrayUsername()
    key = getBintrayKey()
    //configurations = ['published', 'archives']      //configurations = ['deployables']
    //publications = ['published']
    //publications = ['mavenJava']
    publications = ['androidLibraryPub']
    dryRun = false   //Whether to run this as dry-run, without deploying
    publish = true   //If version should be auto published after an upload
    // Package configuration. The plugin will use the repo and name properties to check
    // if the package already exists. In that case, there's no need to configure the
    // other package properties (like userOrg, desc, etc).
    pkg {
        repo = "maven"
        name = POM_ARTIFACT_ID
        desc = POM_DESCRIPTION
        //userOrg = 'myorg'           //An optional organization name when the repo belongs to one of the user's orgs
        websiteUrl = POM_URL        //websiteUrl = 'https://github.com/bintray/gradle-bintray-plugin'
        vcsUrl = POM_SCM_URL        //vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
        issueTrackerUrl = ''        //issueTrackerUrl = 'https://github.com/bintray/gradle-bintray-plugin/issues'
        licenses = ["Apache-2.0"]
        //labels = ['gear', 'gore', 'gorilla']
        //attributes = ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        publicDownloadNumbers = true
        //Optional version descriptor
        version {
            name = VERSION_NAME //Bintray logical version name
            //desc = //Optional - Version-specific description'
            //released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            //vcsTag = '1.3.0'
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                //passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            //mavenCentralSync {
            //    sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
            //    user = 'userToken' //OSS user token
            //    password = 'paasword' //OSS user password
            //    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            //}
        }
    }
}
